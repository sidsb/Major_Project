[{"E:\\8th sem\\major_project\\quora-clone-master\\src\\index.js":"1","E:\\8th sem\\major_project\\quora-clone-master\\src\\serviceWorker.js":"2","E:\\8th sem\\major_project\\quora-clone-master\\src\\App.js":"3","E:\\8th sem\\major_project\\quora-clone-master\\src\\app\\store.js":"4","E:\\8th sem\\major_project\\quora-clone-master\\src\\firebase.js":"5","E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\Quora.js":"6","E:\\8th sem\\major_project\\quora-clone-master\\src\\features\\userSlice.js":"7","E:\\8th sem\\major_project\\quora-clone-master\\src\\features\\questionSlice.js":"8","E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\auth\\Login.js":"9","E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\Feed.js":"10","E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\Widget.js":"11","E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\Sidebar.js":"12","E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\QHeader.js":"13","E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\QuorBox.js":"14","E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\Post.js":"15","E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\WidgetContent.js":"16","E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\SidebarOptions.js":"17"},{"size":623,"mtime":1611890880000,"results":"18","hashOfConfig":"19"},{"size":5004,"mtime":1611890880000,"results":"20","hashOfConfig":"19"},{"size":890,"mtime":1611890880000,"results":"21","hashOfConfig":"19"},{"size":266,"mtime":1611890880000,"results":"22","hashOfConfig":"19"},{"size":668,"mtime":1614317177330,"results":"23","hashOfConfig":"19"},{"size":405,"mtime":1611890880000,"results":"24","hashOfConfig":"19"},{"size":440,"mtime":1611890880000,"results":"25","hashOfConfig":"19"},{"size":604,"mtime":1614435799476,"results":"26","hashOfConfig":"19"},{"size":4265,"mtime":1614093387185,"results":"27","hashOfConfig":"19"},{"size":982,"mtime":1614437427695,"results":"28","hashOfConfig":"19"},{"size":364,"mtime":1611890880000,"results":"29","hashOfConfig":"19"},{"size":229,"mtime":1611890880000,"results":"30","hashOfConfig":"19"},{"size":5268,"mtime":1614437293025,"results":"31","hashOfConfig":"19"},{"size":877,"mtime":1611890880000,"results":"32","hashOfConfig":"19"},{"size":6883,"mtime":1614439777269,"results":"33","hashOfConfig":"19"},{"size":2353,"mtime":1611890880000,"results":"34","hashOfConfig":"19"},{"size":2325,"mtime":1614094321667,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"12lplpc",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"E:\\8th sem\\major_project\\quora-clone-master\\src\\index.js",[],["73","74"],"E:\\8th sem\\major_project\\quora-clone-master\\src\\serviceWorker.js",[],"E:\\8th sem\\major_project\\quora-clone-master\\src\\App.js",[],"E:\\8th sem\\major_project\\quora-clone-master\\src\\app\\store.js",[],"E:\\8th sem\\major_project\\quora-clone-master\\src\\firebase.js",[],"E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\Quora.js",[],"E:\\8th sem\\major_project\\quora-clone-master\\src\\features\\userSlice.js",[],"E:\\8th sem\\major_project\\quora-clone-master\\src\\features\\questionSlice.js",[],"E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\auth\\Login.js",[],"E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\Feed.js",[],"E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\Widget.js",[],"E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\Sidebar.js",[],"E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\QHeader.js",[],"E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\QuorBox.js",[],"E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\Post.js",["75"],"import { Avatar } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Post.css\";\nimport ArrowUpwardOutlinedIcon from \"@material-ui/icons/ArrowUpwardOutlined\";\nimport ArrowDownwardOutlinedIcon from \"@material-ui/icons/ArrowDownwardOutlined\";\nimport RepeatOutlinedIcon from \"@material-ui/icons/RepeatOutlined\";\nimport ChatBubbleOutlineOutlinedIcon from \"@material-ui/icons/ChatBubbleOutlineOutlined\";\nimport { MoreHorizOutlined, ShareOutlined, VolumeMuteSharp } from \"@material-ui/icons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport Modal from \"react-modal\";\nimport db from \"../firebase\";\nimport { selectQuestionId, setQuestionInfo } from \"../features/questionSlice\";\nimport firebase from \"firebase\";\n\nfunction Post({ Id, question, imageUrl, timestamp, users, upvote, downvote, voters }) {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  const [IsmodalOpen, setIsModalOpen] = useState(false);\n  const questionId = useSelector(selectQuestionId);\n  const [answer, setAnswer] = useState(\"\");\n  const [getAnswers, setGetAnswers] = useState([]);\n\n  useEffect(() => {\n    if (questionId) {\n      db.collection(\"questions\")\n        .doc(questionId)\n        .collection(\"answer\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) =>\n          setGetAnswers(\n            snapshot.docs.map((doc) => ({ id: doc.id, answers: doc.data() }))\n          )\n        );\n    }\n  }, [questionId]);\n\n  const handleAnswer = (e) => {\n    e.preventDefault();\n\n    if (questionId) {\n      db.collection(\"questions\").doc(questionId).collection(\"answer\").add({\n        user: user,\n        answer: answer,\n        questionId: questionId,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      });\n    }\n    console.log(questionId);\n    setAnswer(\"\");\n    setIsModalOpen(false);\n  };\n\n  const handleUpVote = (e) => {\n    e.preventDefault();\n    if (questionId) {\n      db.collection(\"questions\").doc(questionId).update({\n        upvote: user.uid === users.uid || voters.includes(user.uid) ? upvote : upvote + 1,\n        voters: user.uid === users.uid || voters.includes(user.uid) ? voters : [...voters, user.uid]\n      })\n\n\n      console.log(voters);\n      console.log(upvote);\n    }\n  }\n  const handleDownVote = (e) => {\n    e.preventDefault();\n    if (questionId) {\n      db.collection(\"questions\").doc(questionId).update({\n        downvote: user.uid === users.uid || voters.includes(user.uid) ? downvote : downvote + 1,\n        voters: user.uid === users.uid || voters.includes(user.uid) ? voters : [...voters, user.uid]\n      })\n    }\n  }\n  return (\n    <div\n      className=\"post\"\n      onClick={() =>\n        dispatch(\n          setQuestionInfo({\n            questionId: Id,\n            questionName: question,\n          })\n        )\n      }\n    >\n      <div className=\"post__info\">\n        <Avatar\n          src={\n            users.photo\n              ? users.photo\n              : \"https://images-platform.99static.com//_QXV_u2KU7-ihGjWZVHQb5d-yVM=/238x1326:821x1909/fit-in/500x500/99designs-contests-attachments/119/119362/attachment_119362573\"\n          }\n        />\n        <h4>{users.displayName ? users.displayName : users.email}</h4>\n        <small>{new Date(timestamp?.toDate()).toLocaleString()}</small>\n      </div>\n      <div className=\"post__body\">\n        <div className=\"post__question\">\n          <p>{question}</p>\n          <button\n            onClick={() => setIsModalOpen(true)}\n            className=\"post__btnAnswer\"\n          >\n            Answer\n          </button>\n          <Modal\n            isOpen={IsmodalOpen}\n            onRequestClose={() => setIsModalOpen(false)}\n            shouldCloseOnOverlayClick={false}\n            style={{\n              overlay: {\n                width: 680,\n                height: 550,\n                backgroundColor: \"rgba(0,0,0,0.8)\",\n                zIndex: \"1000\",\n                top: \"50%\",\n                left: \"50%\",\n                marginTop: \"-250px\",\n                marginLeft: \"-350px\",\n              },\n            }}\n          >\n            <div className=\"modal__question\">\n              <h1>{question}</h1>\n              <p>\n                asked by{\" \"}\n                <span className=\"name\">\n                  {users.displayName ? users.displayName : users.email}\n                </span>{\" \"}\n                {\"\"}\n                on{\" \"}\n                <span className=\"name\">\n                  {new Date(timestamp?.toDate()).toLocaleString()}\n                </span>\n              </p>\n            </div>\n            <div className=\"modal__answer\">\n              <textarea\n                value={answer}\n                onChange={(e) => setAnswer(e.target.value)}\n                placeholder=\"Enter Your Answer\"\n                type=\"text\"\n              />\n            </div>\n            <div className=\"modal__button\">\n              <button className=\"cancle\" onClick={() => setIsModalOpen(false)}>\n                Cancel\n              </button>\n              <button type=\"sumbit\" onClick={handleAnswer} className=\"add\">\n                Add Answer\n              </button>\n            </div>\n          </Modal>\n        </div>\n        <div className=\"post__answer\">\n          {getAnswers.map(({ id, answers }) => (\n            <p key={id} style={{ position: \"relative\", paddingBottom: \"5px\" }}>\n              {Id === answers.questionId ? (\n                <span>\n                  {answers.answer}\n                  <br />\n                  <span\n                    style={{\n                      position: \"absolute\",\n                      color: \"gray\",\n                      fontSize: \"small\",\n                      display: \"flex\",\n                      right: \"0px\",\n                    }}\n                  >\n                    <span style={{ color: \"#b92b27\" }}>\n                      {answers.user.displayName\n                        ? answers.user.displayName\n                        : answers.user.email}{\" \"}\n                      on{\" \"}\n                      {new Date(answers.timestamp?.toDate()).toLocaleString()}\n                    </span>\n                  </span>\n                </span>\n              ) : (\n                  \"\"\n                )}\n            </p>\n          ))}\n        </div>\n        <img src={imageUrl} alt=\"\" />\n      </div>\n      <div className=\"post__footer\">\n        <div className=\"post__footerAction\">\n          {upvote}<ArrowUpwardOutlinedIcon onClick={handleUpVote} />\n          {downvote}<ArrowDownwardOutlinedIcon onClick={handleDownVote} />\n        </div>\n\n        <RepeatOutlinedIcon />\n        <ChatBubbleOutlineOutlinedIcon />\n        <div className=\"post__footerLeft\">\n          <ShareOutlined />\n          <MoreHorizOutlined />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;\n","E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\WidgetContent.js",[],"E:\\8th sem\\major_project\\quora-clone-master\\src\\components\\SidebarOptions.js",[],["76","77"],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":8,"column":44,"nodeType":"84","messageId":"85","endLine":8,"endColumn":59},{"ruleId":"78","replacedBy":"86"},{"ruleId":"80","replacedBy":"87"},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'VolumeMuteSharp' is defined but never used.","Identifier","unusedVar",["88"],["89"],"no-global-assign","no-unsafe-negation"]